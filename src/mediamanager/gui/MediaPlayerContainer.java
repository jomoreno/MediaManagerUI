/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mediamanager.gui;

import com.sun.jna.NativeLibrary;
import java.awt.Color;
import java.awt.Container;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JProgressBar;
import javax.swing.event.ChangeListener;
import uk.co.caprica.vlcj.component.EmbeddedMediaListPlayerComponent;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;

import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import uk.co.caprica.vlcj.player.MediaPlayerEventListener;

import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.*;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import mediamanager.MediaManagerUI;

/**
 *
 * @author Tekken
 */
public class MediaPlayerContainer extends javax.swing.JDialog {

    private static final String VLC_DLL_PATH = "C:\\Program Files\\VideoLAN\\VLC"; 
    private static String videoFilePath = "";
    private Image imageIcon = null;
    
    private Timer timerTask;
    private Timer timerKeepTime;
    
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider volumeSlider;
    
    private EmbeddedMediaPlayerComponent mediaPlayerComp;
    
    /**
     * Creates new form MediaPlayerContainer
     */
    public MediaPlayerContainer(String filePath, Image icon) {

        javax.swing.SwingUtilities.updateComponentTreeUI(this);
        
        /*
        try
        {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.getLookAndFeelDefaults().put("nimbusOrange", (new Color(getRandomColorNumber(), 
                                                                                                        getRandomColorNumber(), 
                                                                                                            getRandomColorNumber())));
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MediaManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MediaManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MediaManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediaManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        
        imageIcon = icon;
        
        initComponents();
        
        setAdditionalUI(filePath);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(686, 530));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 699, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setAdditionalUI(String filePath)
    {
        getContentPane().setLayout(null);
        this.setLayout(null);
        
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel("Volume: ");
        jLabel1.setText("00:00:00");
        jToggleButton1.setText("Play/Pause");
        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton1MouseClicked(evt);
            }
        });
        jLabel2.setBounds(530, 460, 80, 21);
        jLabel1.setBounds(120, 460, 80, 21);
        jToggleButton1.setBounds(10, 460, 100,21);
        this.add(jLabel1);
        this.add(jLabel2);
        this.add(jToggleButton1);

        videoFilePath = filePath;
        NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), VLC_DLL_PATH);
        
        mediaPlayerComp = new EmbeddedMediaListPlayerComponent();
        mediaPlayerComp.setSize(640,360);

        jInternalFrame1 = new JInternalFrame();
        jInternalFrame1.setBounds(0, 0,680,450);
        jInternalFrame1.setFrameIcon(null);
        BasicInternalFrameUI ui = (BasicInternalFrameUI)jInternalFrame1.getUI();
        Container north = (Container)ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
        jInternalFrame1.add(mediaPlayerComp);
        jInternalFrame1.setVisible(true);
        this.add(jInternalFrame1);
        
        jProgressBar1 = new JProgressBar();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(100);
        jProgressBar1.setForeground(new Color(getRandomColorNumber(),getRandomColorNumber(),getRandomColorNumber(),100));
        jProgressBar1.repaint();
        jProgressBar1.setStringPainted(true);
        jProgressBar1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
               int mouseX = e.getX(); 
               int position = (int)Math.round(((double)mouseX / (double)jProgressBar1.getWidth()) * jProgressBar1.getMaximum());
               System.out.println("Position On Progress Bar " + position);
               float seekPosition = (float)position / 100;
               
               System.out.println("Seek Position " + seekPosition);
               mediaPlayerComp.getMediaPlayer().setPosition((float)seekPosition);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                
            }

            @Override
            public void mouseReleased(MouseEvent e) {
               
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                
            }

            @Override
            public void mouseExited(MouseEvent e) {
               
            }
           
        });
        jProgressBar1.setBounds(180, 460, 340, 22);
        jProgressBar1.setVisible(true);
        this.add(jProgressBar1);
        
        volumeSlider = new JSlider(0, 100, 0);
        volumeSlider.setOpaque(false);
        volumeSlider.setValue(100);
        //volumeSlider.setMajorTickSpacing(10);
        //volumeSlider.setMinorTickSpacing(1);
        //volumeSlider.setPaintTicks(true);
        //volumeSlider.setPaintLabels(true);
        volumeSlider.setBorder(BorderFactory.createEmptyBorder(0,0,10,0));
        volumeSlider.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = volumeSlider.getValue();
                mediaPlayerComp.getMediaPlayer().setVolume(value);
            }
        });
        volumeSlider.setBounds(570, 463, 100, 23);
        volumeSlider.setVisible(true);
        this.add(volumeSlider);
        this.setModalityType(ModalityType.APPLICATION_MODAL);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); 
        this.setLocationRelativeTo(null);
        this.setIconImage(imageIcon);
        
        this.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                 timerTask.stop();
                 timerKeepTime.stop();
                 mediaPlayerComp.getMediaPlayer().stop();
            }
        });
        this.getContentPane().setBackground(Color.GRAY);
        this.setResizable(false);
        this.pack();
    }
    
    public void playVideo()
    {
        mediaPlayerComp.getMediaPlayer().playMedia(videoFilePath);
        setUpTasks();
    }
    
    private void setUpTasks()
    {
         ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                float pos = mediaPlayerComp.getMediaPlayer().getPosition();
                //System.out.println("Doing something.... Position " + pos);
                if(mediaPlayerComp.getMediaPlayer().getPosition() == -1)
                {
                    mediaPlayerComp.getMediaPlayer().stop();
                    timerTask.stop();
                    jProgressBar1.setValue(0);
                    jToggleButton1.doClick();
                }
                else
                {
                    jProgressBar1.setValue(getPosition(pos));
                }
            }
        };
        
        ActionListener taskKeepTimer = new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent evt) {
                float pos = mediaPlayerComp.getMediaPlayer().getPosition();
                if(mediaPlayerComp.getMediaPlayer().getPosition() == -1)
                {
                    timerKeepTime.stop();
                    jLabel1.setText("00:00:00");
                }
                else
                {
                    String timeS = getTime(mediaPlayerComp.getMediaPlayer().getTime());
                    jLabel1.setText(timeS);
                    //System.out.println("Time : " + timeS);
                }
            }
        };

        timerTask = new Timer(1000,taskPerformer);
        timerTask.start();
        
        timerKeepTime = new Timer(350,taskKeepTimer);
        timerKeepTime.start();
        
    }
    
    private int getPosition(float pos)
    {
        return Math.min(100, Math.round(pos * 100.0f));
    }
    
    private String getTime(float pos)
    {
        float hours = pos / 1000 / 60 / 60; 
        float minutes = pos / 1000 / 60;
        float seconds = (pos / 1000) - minutes;
        //float milliseconds = seconds * 1000;
        // String.format("%03d",((int)milliseconds % 1000)
        return String.format("%02d",(int)hours) + ":" + String.format("%02d",(int)minutes) + ":" + String.format("%02d",((int)seconds % 60));
    }
    
    private static int getRandomColorNumber()
    {
        return (int)((Math.random() * 1000) % 255);
    }
    
    private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {                                            

        if(!jToggleButton1.isSelected())
        {
            if(mediaPlayerComp.getMediaPlayer().getPosition() == -1)
            {
                mediaPlayerComp.getMediaPlayer().play();
                setUpTasks();
            }
            else
            {
                mediaPlayerComp.getMediaPlayer().play();
            }
        }
        else
        {
            mediaPlayerComp.getMediaPlayer().pause();
        }
    }  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MediaPlayerContainer mp = new MediaPlayerContainer("D:\\Videos\\Korean\\FIESTAR - I Don't Know.mp4",null);
                mp.playVideo();
                mp.setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
